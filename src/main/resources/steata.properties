# Application info
spring.application.name=my-microservice
seata.application-id=${spring.application.name}

# Seata TX Service Group - must match server side configuration
seata.tx-service-group=my_tx_group
seata.service.vgroup-mapping.my_tx_group=default

# Seata service configuration
seata.service.grouplist.default=127.0.0.1:8091
seata.service.enable-degrade=false
seata.service.disable-global-transaction=false

# Seata client configuration
seata.client.rm.async-commit-buffer-limit=10000
seata.client.rm.report-retry-count=5
seata.client.rm.table-meta-check-enable=false
seata.client.rm.report-success-enable=false
seata.client.rm.saga-branch-register-enable=false
seata.client.rm.saga-json-parser=fastjson
seata.client.rm.lock.retry-interval=10
seata.client.rm.lock.retry-times=30
seata.client.rm.lock.retry-policy-branch-rollback-on-conflict=true

# Seata TM configuration
seata.client.tm.commit-retry-count=5
seata.client.tm.rollback-retry-count=5
seata.client.tm.default-global-transaction-timeout=60000
seata.client.tm.degrade-check=false
seata.client.tm.degrade-check-allow-times=10
seata.client.tm.degrade-check-period=2000

# Seata undo configuration
seata.client.undo.data-validation=true
seata.client.undo.log-serialization=jackson
seata.client.undo.only-care-update-columns=true
seata.client.undo.log-table=undo_log

# Seata log configuration
seata.log.exception-rate=100

# Seata registry configuration (using file for simplicity, could be nacos, eureka, etc.)
seata.registry.type=file

# Seata config center (using file for simplicity, could be apollo, nacos, etc.)
seata.config.type=file