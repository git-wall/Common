plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.1.6'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

//ext {
//    sentryVersion = "6.28.0"
//}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
    mavenCentral()
    maven {
        url project.property("SNAPSHOT_REPOSITORY_URL")
        allowInsecureProtocol = true
        credentials {
            username project.property("NEXUS_USERNAME").toString()
            password project.property("NEXUS_PASSWORD").toString()
        }
    }
}

group = 'com.core'
version = '1.0.0-SNAPSHOT'

bootJar {
    enabled = false
}

jar {
    enabled = true
    archiveFileName = "Common-${version}.jar"
}

dependencies {
    // new teach



//    api 'io.sentry:sentry-spring-boot-starter'

    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    compileOnlyApi 'org.projectlombok:lombok:1.18.34'

    // monad transformer framework
    api 'io.vavr:vavr:1.0.0-alpha-4'

    // bytebuddy
    api 'net.bytebuddy:byte-buddy:1.15.10'

    api 'com.fasterxml.jackson.core:jackson-annotations:2.18.2'
    api 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    api 'com.fasterxml.jackson.core:jackson-core:2.18.2'
    api 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.18.2'

    api 'com.google.code.gson:gson:2.11.0'

    // mapstruct
    api group: 'org.mapstruct', name: 'mapstruct', version: '1.6.0'
    api group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.6.0'

    // model mapper
    api 'org.modelmapper:modelmapper:3.2.1'

    api 'org.apache.kafka:kafka-clients:3.8.0'
    api 'org.apache.kafka:kafka-streams:3.8.0'

    api 'org.slf4j:slf4j-api:2.1.0-alpha1'
    api 'de.siegmar:logback-gelf:4.0.2'
    api 'org.graylog2:gelfj:1.1.16'

    api 'org.apache.httpcomponents.client5:httpclient5-fluent:5.4.1'

    api 'org.apache.commons:commons-lang3:3.14.0'
    // Thread-Safe in multi-thread | use case: database connection pools, HTTP connection pools
    api 'org.apache.commons:commons-pool2:2.12.0'

    // csv
    api 'com.opencsv:opencsv:5.9'
    api 'org.apache.poi:poi-ooxml:5.4.0'

    // job
    runtimeOnly 'io.mantisrx:mantis-runtime:3.1.11'

    // saga pattern
    api 'io.seata:seata-all:2.0.0'

    // spring
    api 'org.springframework.boot:spring-boot-starter'
    api 'org.springframework.boot:spring-boot-starter-actuator'
    api 'org.springframework.boot:spring-boot-starter-cache'
    api 'org.springframework.boot:spring-boot-starter-validation'
    api 'org.springframework.boot:spring-boot-starter-web'
    api 'org.springframework.boot:spring-boot-starter-aop'
    api 'org.springframework.boot:spring-boot-starter-data-redis'
    api 'org.springframework.kafka:spring-kafka'
    api 'org.springframework.cloud:spring-cloud-stream'
    api 'org.springframework.cloud:spring-cloud-starter-vault-config'
    api 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
    api 'org.springframework.cloud:spring-cloud-stream-binder-kafka-streams'
    api 'org.springframework.boot:spring-boot-starter-data-jpa'
    api 'org.springframework.boot:spring-boot-starter-webflux'
    api 'org.springframework.cloud:spring-cloud-starter-config'
    api 'org.springframework.boot:spring-boot-starter-thymeleaf'
    api 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

    api 'org.springframework.security:spring-security-web'
    api 'org.springframework.security:spring-security-oauth2-client'


    // spring cloud
    api 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
    api 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    api 'org.springframework.cloud:spring-cloud-starter-sleuth'
    api 'org.springframework.cloud:spring-cloud-sleuth-zipkin'
    api 'io.zipkin.reporter2:zipkin-reporter-brave'

    // monitoring
    api 'io.micrometer:micrometer-registry-prometheus'
    api group: 'io.micrometer', name: 'micrometer-tracing-bridge-brave', version: '1.3.3'

    api 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix:2.2.10.RELEASE'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2021.0.3"
//        mavenBom "io.sentry:sentry-bom:$sentryVersion"
    }
}

///////////////////////////////////// PUBLISH TO NEXUS /////////////////////////////////////////////
// after ./gradlew :Common:build or ./gradlew clean build
// then use ./gradlew :Common:publish or ./gradlew publish to up jar to nexus
// if not nexus will create new version + "-number++" like ( common.jar -> common-1.jar -> common-2.jar)

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            // make gradle load library
            from components.java
            artifact("build/libs/Common-${version}.jar") {
                extension 'jar'
            }
        }
    }

    // The Nexus repo that we will upload the Jar file to
    repositories {
        maven {
            url project.property("SNAPSHOT_REPOSITORY_URL")
            allowInsecureProtocol = true
            credentials {
                username project.property("NEXUS_USERNAME").toString()
                password project.property("NEXUS_PASSWORD").toString()
            }
        }
    }
}
